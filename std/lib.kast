# BrainoidGames: do you have type casting yet? if not, can we name it kast()?

syntax then <- 0 = a ";" b;
syntax then <- 0 = a ";";

syntax break_impl <- 2 = "break" value;
syntax break_impl <- 2 = "break";
syntax continue_impl <- 2 = "continue";

syntax create_impl <- 3 = "impl" trait "for" type "as" impl;
syntax get_impl <- 3 = type "as" trait;
syntax check_impl <- 3 = type "impls" trait;

syntax let <- 4 = "let" pattern "=" value;
syntax const_let <- 4 = "const" pattern "=" value;

syntax unwinding <- 5 = "unwinding" def;
syntax with_context <- 5 = "with" new_context "(" expr ")";
syntax current_context <- 5 = "current" context_type;
syntax macro <- 5 = "macro" def;
syntax comptime <- 5 = "comptime" value;
syntax oneof <- 5 = "oneof" def;

syntax combine_variants <- 6 = "|" a;
syntax combine_variants <- 6 = a "|" b;
syntax function_def <- 7 = args "=>" body;

syntax single_variant -> 8 = name "of" type;
syntax single_variant -> 8 = name "ofnone";
syntax type_ascribe <- 8 = value "::" type;

syntax template_def <- 9 = "forall" args "." def;
syntax template_def <- 9 = "forall" args "where" where "." def;

syntax function_type -> 10 = arg "->" result;
syntax function_type -> 10 = arg "->" result "incontext" contexts;

syntax tuple <- 11 = a "," b;
syntax tuple <- 11 = a ",";
syntax field <- 12 = name ":" value;
syntax inline_field <- 12 = "~" name;
syntax inline_typed_field <- 12 = "~" name "::" type;

syntax match <- 13 = "match" value "(" branches ")";
syntax if <- 13 = "if" cond "then" then;
syntax if <- 13 = "if" cond "then" then "else" else;
syntax if -> 13 = cond "?" then ":" else;
syntax if -> 13 = cond "then" then "else" else;

syntax implements <- 14 = type "implements" trait;

syntax pipe <- 15 = args "|>" f;
syntax pipe <- 15 = f "<|" args;

syntax catch_impl <- 16 = expr "catch" e "{" catch_block "}";

syntax or <- 17 = lhs "or" rhs;
syntax and <- 18 = lhs "and" rhs;

syntax less <- 19 = lhs "<" rhs;
syntax less_or_equal <- 19 = lhs "<=" rhs;
syntax equal <- 19 = lhs "==" rhs;
syntax not_equal <- 19 = lhs "!=" rhs;
syntax greater_or_equal <- 19 = lhs ">=" rhs;
syntax greater <- 19 = lhs ">" rhs;

syntax uplus <- 20 = "+" x;
syntax negate <- 20 = "-" x;
syntax add <- 20 = lhs "+" rhs;
syntax sub <- 20 = lhs "-" rhs;

syntax mul <- 40 = lhs "*" rhs;
syntax div <- 40 = lhs "/" rhs;
syntax mod <- 40 = lhs "%" rhs;

syntax pow -> 60 = lhs "^" rhs;

syntax call <- 100 = f args;

syntax typeof <- 120 = "typeof" expr;
syntax typeofvalue <- 120 = "typeofvalue" expr;

syntax instantiate_template <- 150 = template "[" args "]";

syntax quote -> 200 = "`" expr;
syntax quote -> 200 = "`" "(" expr ")";
syntax unquote -> 200 = "$" expr;
syntax unquote -> 200 = "$" "(" expr ")";

syntax field_access <- 300 = obj "." field;

syntax function_def <- 500 = "fn" "(" args ")" contexts "{" body "}";
syntax function_def <- 500 = "fn" "(" args ")" "->" result_type "{" body "}";
syntax function_def <- 500 = "fn" "(" args ")" "{" body "}";
syntax function_def <- 100000 = "(" args ")" "{" body "}";
syntax function_def <- 100000 = "(" ")" "{" body "}";
syntax function_def <- 100000 = "{" body "}";

syntax scope <- 100000 = "(" e ")";
syntax unit <- 100000 = "(" ")";

let Option = forall (T :: type). (Some of T | None ofnone);
let Either = forall ((~left, ~right) :: ( left: type, right: type )). (Left of left | Right of right);
let Result = forall ((~ok, ~error) :: ( ok: type, error: type)). (Ok of ok | Error of error);

const inline_field = macro name : name => `($name : $name);
const inline_typed_field = macro (~name, ~type) :: (name: ast, type: ast) => `(
    $name: ($name :: $type)
);


# args |> f
const pipe = macro ~f, ~args => `((
    $f $args
));

let loop_context = (
    finish_current_iteration: (bool -> never), # todo should be option[T] -> never
);

# todo
# with = forall (arg :: type, result :: type, old_context :: type, new_context :: type).
# fn (body :: arg -> result incontext (old_context and new_context)) old_context {
# body arg
# }

let loop = fn (body :: (void -> void incontext loop_context)) {
    let should_continue = unwinding (token :: unwind_token) {
        let current_loop_context = (
            finish_current_iteration: (x :: bool => unwind ( ~token, value: x ) ),
        );
        with current_loop_context (
            body ();
            true
        )
    };
    if should_continue then (loop body);
};

let do_break = fn (value :: void) loop_context {
    (current loop_context).finish_current_iteration false
};

let do_continue = fn (void) loop_context {
    (current loop_context).finish_current_iteration true
};

let continue_impl = macro (args :: any) => (
    `(do_continue ())
);

let break_impl = macro (args :: any) => (
    let value :: ast = field_access (
        obj: `(args),
        field: `(value),
        default_value: `(`(void)),
    );
    `(do_break $value)
);

let throws = forall (error :: type). (throw: (error -> never));
let throw = forall (error :: type). (
	fn (e :: error) {
		(current throws[error]).throw e
	}
);

let try = forall
		(~ok :: type, ~error :: type). (
	fn (body :: (void -> ok incontext throws[error])) {
		unwinding (token :: unwind_token) {
			const result_type = Result[~ok, ~error];
			let throw_context = throw: (e :: error => unwind (~token, value: result_type.Error e));
			with throw_context (
			 	body () |> result_type.Ok
			)
		}
	}
);

let catch_impl = macro ~expr :: ast, ~e :: ast, ~catch_block :: ast => `(
	match $expr (
		| Ok of value => value
		| Error of $e => $catch_block
	)
);

let random = forall (T :: type). (
    if is_same_type (a: T, b: int32) then
        random_int32
    else (if is_same_type (a: T, b: float64) then
        random_float64
    else
        panic "wtf")
);

const TypeName :: type = (
    name: string
);

impl TypeName for void as (
    name: "void",
);

impl TypeName for type as (
    name: "type",
);

impl TypeName for bool as (
    name: "bool",
);

impl TypeName for int32 as (
    name: "int32",
);

impl TypeName for int64 as (
    name: "int64",
);

impl TypeName for float32 as (
    name: "float32",
);

impl TypeName for float64 as (
    name: "float64",
);

impl TypeName for string as (
    name: "string",
);

let type_name = forall (T :: type) where (T impls TypeName). (
    (T as TypeName).name
);

let parse = forall (T :: type). (
    if is_same_type (a: T, b: int32) then
        string_to_int32
    else
        panic "not implemented"
);

()
